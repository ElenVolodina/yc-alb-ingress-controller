// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/yandex-cloud/alb-ingress/controllers/ingress (interfaces: GroupLoader,EngineBuilder,Deployer,StatusResolver)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	v1alpha1 "github.com/yandex-cloud/alb-ingress/api/v1alpha1"
	deploy "github.com/yandex-cloud/alb-ingress/pkg/deploy"
	k8s "github.com/yandex-cloud/alb-ingress/pkg/k8s"
	reconcile "github.com/yandex-cloud/alb-ingress/pkg/reconcile"
	yc "github.com/yandex-cloud/alb-ingress/pkg/yc"
	apploadbalancer "github.com/yandex-cloud/go-genproto/yandex/cloud/apploadbalancer/v1"
	v1 "k8s.io/api/networking/v1"
	types "k8s.io/apimachinery/pkg/types"
	reflect "reflect"
)

// MockGroupLoader is a mock of GroupLoader interface
type MockGroupLoader struct {
	ctrl     *gomock.Controller
	recorder *MockGroupLoaderMockRecorder
}

// MockGroupLoaderMockRecorder is the mock recorder for MockGroupLoader
type MockGroupLoaderMockRecorder struct {
	mock *MockGroupLoader
}

// NewMockGroupLoader creates a new mock instance
func NewMockGroupLoader(ctrl *gomock.Controller) *MockGroupLoader {
	mock := &MockGroupLoader{ctrl: ctrl}
	mock.recorder = &MockGroupLoaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockGroupLoader) EXPECT() *MockGroupLoaderMockRecorder {
	return m.recorder
}

// Load mocks base method
func (m *MockGroupLoader) Load(arg0 context.Context, arg1 types.NamespacedName) (*k8s.IngressGroup, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Load", arg0, arg1)
	ret0, _ := ret[0].(*k8s.IngressGroup)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Load indicates an expected call of Load
func (mr *MockGroupLoaderMockRecorder) Load(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Load", reflect.TypeOf((*MockGroupLoader)(nil).Load), arg0, arg1)
}

// MockEngineBuilder is a mock of EngineBuilder interface
type MockEngineBuilder struct {
	ctrl     *gomock.Controller
	recorder *MockEngineBuilderMockRecorder
}

// MockEngineBuilderMockRecorder is the mock recorder for MockEngineBuilder
type MockEngineBuilderMockRecorder struct {
	mock *MockEngineBuilder
}

// NewMockEngineBuilder creates a new mock instance
func NewMockEngineBuilder(ctrl *gomock.Controller) *MockEngineBuilder {
	mock := &MockEngineBuilder{ctrl: ctrl}
	mock.recorder = &MockEngineBuilderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockEngineBuilder) EXPECT() *MockEngineBuilderMockRecorder {
	return m.recorder
}

// Build mocks base method
func (m *MockEngineBuilder) Build(arg0 context.Context, arg1 *k8s.IngressGroup, arg2 *v1alpha1.IngressGroupSettings) (*reconcile.IngressGroupEngine, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Build", arg0, arg1, arg2)
	ret0, _ := ret[0].(*reconcile.IngressGroupEngine)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Build indicates an expected call of Build
func (mr *MockEngineBuilderMockRecorder) Build(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Build", reflect.TypeOf((*MockEngineBuilder)(nil).Build), arg0, arg1, arg2)
}

// MockDeployer is a mock of Deployer interface
type MockDeployer struct {
	ctrl     *gomock.Controller
	recorder *MockDeployerMockRecorder
}

// MockDeployerMockRecorder is the mock recorder for MockDeployer
type MockDeployerMockRecorder struct {
	mock *MockDeployer
}

// NewMockDeployer creates a new mock instance
func NewMockDeployer(ctrl *gomock.Controller) *MockDeployer {
	mock := &MockDeployer{ctrl: ctrl}
	mock.recorder = &MockDeployerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockDeployer) EXPECT() *MockDeployerMockRecorder {
	return m.recorder
}

// Deploy mocks base method
func (m *MockDeployer) Deploy(arg0 context.Context, arg1 string, arg2 deploy.ReconcileEngine) (yc.BalancerResources, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Deploy", arg0, arg1, arg2)
	ret0, _ := ret[0].(yc.BalancerResources)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Deploy indicates an expected call of Deploy
func (mr *MockDeployerMockRecorder) Deploy(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Deploy", reflect.TypeOf((*MockDeployer)(nil).Deploy), arg0, arg1, arg2)
}

// MockStatusResolver is a mock of StatusResolver interface
type MockStatusResolver struct {
	ctrl     *gomock.Controller
	recorder *MockStatusResolverMockRecorder
}

// MockStatusResolverMockRecorder is the mock recorder for MockStatusResolver
type MockStatusResolverMockRecorder struct {
	mock *MockStatusResolver
}

// NewMockStatusResolver creates a new mock instance
func NewMockStatusResolver(ctrl *gomock.Controller) *MockStatusResolver {
	mock := &MockStatusResolver{ctrl: ctrl}
	mock.recorder = &MockStatusResolverMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockStatusResolver) EXPECT() *MockStatusResolverMockRecorder {
	return m.recorder
}

// Resolve mocks base method
func (m *MockStatusResolver) Resolve(arg0 *apploadbalancer.LoadBalancer) v1.IngressStatus {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Resolve", arg0)
	ret0, _ := ret[0].(v1.IngressStatus)
	return ret0
}

// Resolve indicates an expected call of Resolve
func (mr *MockStatusResolverMockRecorder) Resolve(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Resolve", reflect.TypeOf((*MockStatusResolver)(nil).Resolve), arg0)
}
