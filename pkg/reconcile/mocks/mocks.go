// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/yandex-cloud/alb-ingress/pkg/reconcile (interfaces: Repository,UpdatePredicates)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	apploadbalancer "github.com/yandex-cloud/go-genproto/yandex/cloud/apploadbalancer/v1"
	operation "github.com/yandex-cloud/go-genproto/yandex/cloud/operation"
	reflect "reflect"
)

// MockRepository is a mock of Repository interface
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// CreateBackendGroup mocks base method
func (m *MockRepository) CreateBackendGroup(arg0 context.Context, arg1 *apploadbalancer.BackendGroup) (*operation.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateBackendGroup", arg0, arg1)
	ret0, _ := ret[0].(*operation.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateBackendGroup indicates an expected call of CreateBackendGroup
func (mr *MockRepositoryMockRecorder) CreateBackendGroup(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateBackendGroup", reflect.TypeOf((*MockRepository)(nil).CreateBackendGroup), arg0, arg1)
}

// CreateHTTPRouter mocks base method
func (m *MockRepository) CreateHTTPRouter(arg0 context.Context, arg1 *apploadbalancer.HttpRouter) (*operation.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateHTTPRouter", arg0, arg1)
	ret0, _ := ret[0].(*operation.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateHTTPRouter indicates an expected call of CreateHTTPRouter
func (mr *MockRepositoryMockRecorder) CreateHTTPRouter(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateHTTPRouter", reflect.TypeOf((*MockRepository)(nil).CreateHTTPRouter), arg0, arg1)
}

// CreateLoadBalancer mocks base method
func (m *MockRepository) CreateLoadBalancer(arg0 context.Context, arg1 *apploadbalancer.LoadBalancer) (*operation.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateLoadBalancer", arg0, arg1)
	ret0, _ := ret[0].(*operation.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateLoadBalancer indicates an expected call of CreateLoadBalancer
func (mr *MockRepositoryMockRecorder) CreateLoadBalancer(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateLoadBalancer", reflect.TypeOf((*MockRepository)(nil).CreateLoadBalancer), arg0, arg1)
}

// DeleteBackendGroup mocks base method
func (m *MockRepository) DeleteBackendGroup(arg0 context.Context, arg1 *apploadbalancer.BackendGroup) (*operation.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteBackendGroup", arg0, arg1)
	ret0, _ := ret[0].(*operation.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteBackendGroup indicates an expected call of DeleteBackendGroup
func (mr *MockRepositoryMockRecorder) DeleteBackendGroup(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteBackendGroup", reflect.TypeOf((*MockRepository)(nil).DeleteBackendGroup), arg0, arg1)
}

// DeleteHTTPRouter mocks base method
func (m *MockRepository) DeleteHTTPRouter(arg0 context.Context, arg1 *apploadbalancer.HttpRouter) (*operation.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteHTTPRouter", arg0, arg1)
	ret0, _ := ret[0].(*operation.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteHTTPRouter indicates an expected call of DeleteHTTPRouter
func (mr *MockRepositoryMockRecorder) DeleteHTTPRouter(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteHTTPRouter", reflect.TypeOf((*MockRepository)(nil).DeleteHTTPRouter), arg0, arg1)
}

// DeleteLoadBalancer mocks base method
func (m *MockRepository) DeleteLoadBalancer(arg0 context.Context, arg1 *apploadbalancer.LoadBalancer) (*operation.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteLoadBalancer", arg0, arg1)
	ret0, _ := ret[0].(*operation.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteLoadBalancer indicates an expected call of DeleteLoadBalancer
func (mr *MockRepositoryMockRecorder) DeleteLoadBalancer(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteLoadBalancer", reflect.TypeOf((*MockRepository)(nil).DeleteLoadBalancer), arg0, arg1)
}

// FindBackendGroup mocks base method
func (m *MockRepository) FindBackendGroup(arg0 context.Context, arg1 string) (*apploadbalancer.BackendGroup, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindBackendGroup", arg0, arg1)
	ret0, _ := ret[0].(*apploadbalancer.BackendGroup)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindBackendGroup indicates an expected call of FindBackendGroup
func (mr *MockRepositoryMockRecorder) FindBackendGroup(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindBackendGroup", reflect.TypeOf((*MockRepository)(nil).FindBackendGroup), arg0, arg1)
}

// ListBackendGroupOperations mocks base method
func (m *MockRepository) ListBackendGroupOperations(arg0 context.Context, arg1 *apploadbalancer.BackendGroup) ([]*operation.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListBackendGroupOperations", arg0, arg1)
	ret0, _ := ret[0].([]*operation.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListBackendGroupOperations indicates an expected call of ListBackendGroupOperations
func (mr *MockRepositoryMockRecorder) ListBackendGroupOperations(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListBackendGroupOperations", reflect.TypeOf((*MockRepository)(nil).ListBackendGroupOperations), arg0, arg1)
}

// ListHTTPRouterOperations mocks base method
func (m *MockRepository) ListHTTPRouterIncompleteOperations(arg0 context.Context, arg1 *apploadbalancer.HttpRouter) ([]*operation.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListHTTPRouterIncompleteOperations", arg0, arg1)
	ret0, _ := ret[0].([]*operation.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListHTTPRouterOperations indicates an expected call of ListHTTPRouterOperations
func (mr *MockRepositoryMockRecorder) ListHTTPRouterOperations(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListHTTPRouterIncompleteOperations", reflect.TypeOf((*MockRepository)(nil).ListHTTPRouterIncompleteOperations), arg0, arg1)
}

// ListLoadBalancerOperations mocks base method
func (m *MockRepository) ListLoadBalancerIncompleteOperations(arg0 context.Context, arg1 *apploadbalancer.LoadBalancer) ([]*operation.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListLoadBalancerIncompleteOperations", arg0, arg1)
	ret0, _ := ret[0].([]*operation.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListLoadBalancerOperations indicates an expected call of ListLoadBalancerOperations
func (mr *MockRepositoryMockRecorder) ListLoadBalancerOperations(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListLoadBalancerIncompleteOperations", reflect.TypeOf((*MockRepository)(nil).ListLoadBalancerIncompleteOperations), arg0, arg1)
}

// UpdateBackendGroup mocks base method
func (m *MockRepository) UpdateBackendGroup(arg0 context.Context, arg1 *apploadbalancer.BackendGroup) (*operation.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateBackendGroup", arg0, arg1)
	ret0, _ := ret[0].(*operation.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateBackendGroup indicates an expected call of UpdateBackendGroup
func (mr *MockRepositoryMockRecorder) UpdateBackendGroup(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateBackendGroup", reflect.TypeOf((*MockRepository)(nil).UpdateBackendGroup), arg0, arg1)
}

// UpdateHTTPRouter mocks base method
func (m *MockRepository) UpdateHTTPRouter(arg0 context.Context, arg1 *apploadbalancer.HttpRouter) (*operation.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateHTTPRouter", arg0, arg1)
	ret0, _ := ret[0].(*operation.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateHTTPRouter indicates an expected call of UpdateHTTPRouter
func (mr *MockRepositoryMockRecorder) UpdateHTTPRouter(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateHTTPRouter", reflect.TypeOf((*MockRepository)(nil).UpdateHTTPRouter), arg0, arg1)
}

// UpdateLoadBalancer mocks base method
func (m *MockRepository) UpdateLoadBalancer(arg0 context.Context, arg1 *apploadbalancer.LoadBalancer) (*operation.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateLoadBalancer", arg0, arg1)
	ret0, _ := ret[0].(*operation.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateLoadBalancer indicates an expected call of UpdateLoadBalancer
func (mr *MockRepositoryMockRecorder) UpdateLoadBalancer(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateLoadBalancer", reflect.TypeOf((*MockRepository)(nil).UpdateLoadBalancer), arg0, arg1)
}

// MockUpdatePredicates is a mock of UpdatePredicates interface
type MockUpdatePredicates struct {
	ctrl     *gomock.Controller
	recorder *MockUpdatePredicatesMockRecorder
}

// MockUpdatePredicatesMockRecorder is the mock recorder for MockUpdatePredicates
type MockUpdatePredicatesMockRecorder struct {
	mock *MockUpdatePredicates
}

// NewMockUpdatePredicates creates a new mock instance
func NewMockUpdatePredicates(ctrl *gomock.Controller) *MockUpdatePredicates {
	mock := &MockUpdatePredicates{ctrl: ctrl}
	mock.recorder = &MockUpdatePredicatesMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockUpdatePredicates) EXPECT() *MockUpdatePredicatesMockRecorder {
	return m.recorder
}

// BackendGroupNeedsUpdate mocks base method
func (m *MockUpdatePredicates) BackendGroupNeedsUpdate(arg0, arg1 *apploadbalancer.BackendGroup) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BackendGroupNeedsUpdate", arg0, arg1)
	ret0, _ := ret[0].(bool)
	return ret0
}

// BackendGroupNeedsUpdate indicates an expected call of BackendGroupNeedsUpdate
func (mr *MockUpdatePredicatesMockRecorder) BackendGroupNeedsUpdate(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BackendGroupNeedsUpdate", reflect.TypeOf((*MockUpdatePredicates)(nil).BackendGroupNeedsUpdate), arg0, arg1)
}

// BalancerNeedsUpdate mocks base method
func (m *MockUpdatePredicates) BalancerNeedsUpdate(arg0, arg1 *apploadbalancer.LoadBalancer) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BalancerNeedsUpdate", arg0, arg1)
	ret0, _ := ret[0].(bool)
	return ret0
}

// BalancerNeedsUpdate indicates an expected call of BalancerNeedsUpdate
func (mr *MockUpdatePredicatesMockRecorder) BalancerNeedsUpdate(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BalancerNeedsUpdate", reflect.TypeOf((*MockUpdatePredicates)(nil).BalancerNeedsUpdate), arg0, arg1)
}

// RouterNeedsUpdate mocks base method
func (m *MockUpdatePredicates) RouterNeedsUpdate(arg0, arg1 *apploadbalancer.HttpRouter) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RouterNeedsUpdate", arg0, arg1)
	ret0, _ := ret[0].(bool)
	return ret0
}

// RouterNeedsUpdate indicates an expected call of RouterNeedsUpdate
func (mr *MockUpdatePredicatesMockRecorder) RouterNeedsUpdate(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RouterNeedsUpdate", reflect.TypeOf((*MockUpdatePredicates)(nil).RouterNeedsUpdate), arg0, arg1)
}
