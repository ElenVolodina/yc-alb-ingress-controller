// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/yandex-cloud/alb-ingress/pkg/deploy (interfaces: TargetGroupRepo)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	apploadbalancer "github.com/yandex-cloud/go-genproto/yandex/cloud/apploadbalancer/v1"
	operation "github.com/yandex-cloud/go-genproto/yandex/cloud/operation"
	reflect "reflect"
)

// MockTargetGroupRepo is a mock of TargetGroupRepo interface
type MockTargetGroupRepo struct {
	ctrl     *gomock.Controller
	recorder *MockTargetGroupRepoMockRecorder
}

// MockTargetGroupRepoMockRecorder is the mock recorder for MockTargetGroupRepo
type MockTargetGroupRepoMockRecorder struct {
	mock *MockTargetGroupRepo
}

// NewMockTargetGroupRepo creates a new mock instance
func NewMockTargetGroupRepo(ctrl *gomock.Controller) *MockTargetGroupRepo {
	mock := &MockTargetGroupRepo{ctrl: ctrl}
	mock.recorder = &MockTargetGroupRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockTargetGroupRepo) EXPECT() *MockTargetGroupRepoMockRecorder {
	return m.recorder
}

// CreateTargetGroup mocks base method
func (m *MockTargetGroupRepo) CreateTargetGroup(arg0 context.Context, arg1 *apploadbalancer.TargetGroup) (*operation.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTargetGroup", arg0, arg1)
	ret0, _ := ret[0].(*operation.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTargetGroup indicates an expected call of CreateTargetGroup
func (mr *MockTargetGroupRepoMockRecorder) CreateTargetGroup(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTargetGroup", reflect.TypeOf((*MockTargetGroupRepo)(nil).CreateTargetGroup), arg0, arg1)
}

// DeleteTargetGroup mocks base method
func (m *MockTargetGroupRepo) DeleteTargetGroup(arg0 context.Context, arg1 *apploadbalancer.TargetGroup) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTargetGroup", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteTargetGroup indicates an expected call of DeleteTargetGroup
func (mr *MockTargetGroupRepoMockRecorder) DeleteTargetGroup(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTargetGroup", reflect.TypeOf((*MockTargetGroupRepo)(nil).DeleteTargetGroup), arg0, arg1)
}

// FindTargetGroup mocks base method
func (m *MockTargetGroupRepo) FindTargetGroup(arg0 context.Context, arg1 string) (*apploadbalancer.TargetGroup, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindTargetGroup", arg0, arg1)
	ret0, _ := ret[0].(*apploadbalancer.TargetGroup)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindTargetGroup indicates an expected call of FindTargetGroup
func (mr *MockTargetGroupRepoMockRecorder) FindTargetGroup(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindTargetGroup", reflect.TypeOf((*MockTargetGroupRepo)(nil).FindTargetGroup), arg0, arg1)
}

// UpdateTargetGroup mocks base method
func (m *MockTargetGroupRepo) UpdateTargetGroup(arg0 context.Context, arg1 *apploadbalancer.TargetGroup) (*operation.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTargetGroup", arg0, arg1)
	ret0, _ := ret[0].(*operation.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateTargetGroup indicates an expected call of UpdateTargetGroup
func (mr *MockTargetGroupRepoMockRecorder) UpdateTargetGroup(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTargetGroup", reflect.TypeOf((*MockTargetGroupRepo)(nil).UpdateTargetGroup), arg0, arg1)
}
